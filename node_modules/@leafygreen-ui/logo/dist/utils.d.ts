import { HTMLElementProps } from '@leafygreen-ui/lib';
declare const Product: {
    readonly Atlas: "atlas";
    readonly Charts: "charts";
    readonly CloudManager: "cloudManager";
    readonly Realm: "realm";
};
declare type Product = typeof Product[keyof typeof Product];
declare const Lockup: {
    readonly Default: "default";
    readonly Stacked: "stacked";
};
declare type Lockup = typeof Lockup[keyof typeof Lockup];
export { Product, Lockup };
export interface LogoProps extends HTMLElementProps<'svg'> {
    /**
     * Determines whether or not the component will appear in dark mode.
     *
     * @default: `false`
     */
    darkMode?: boolean;
    /**
     * Determines if Logo or LogoMark will appear in knockout state.
     *
     * @default: `false`
     */
    knockout?: boolean;
    /**
     * Determines height of the Logo or LogoMark component.
     *
     * @default: 40
     */
    height?: number;
    /**
     * Determines what product will be rendered with the logomark.
     * If 'none', MongoDB will appear next to the leaf.
     *
     * @default: 'none'
     */
    product?: Product | 'none';
    /**
     * Determines orientation of product name as it relates to the logo mark.
     * By default, will appear on a single line.
     *
     * @default: 'default'
     */
    lockup?: Lockup;
}
declare const Fill: {
    Dark: "#21313C";
    Light: string;
};
declare type Fill = typeof Fill[keyof typeof Fill];
export { Fill };
export interface SVGLogoProps {
    fill: Fill;
    className: string;
}
export declare type ProductLogoProps = HTMLElementProps<'svg', never> & {
    knockout?: boolean;
    size?: number;
    darkMode?: boolean;
    height?: number;
};
export declare const getAccessibleProps: ({ role, "aria-label": ariaLabel, }: {
    role: string;
    'aria-label': string;
}) => {
    role: string;
    'aria-label': string;
    alt?: undefined;
    'aria-hidden'?: undefined;
} | {
    role: string;
    alt: string;
    'aria-hidden': boolean;
    'aria-label'?: undefined;
};
export declare const getColor: ({ knockout, size, flat, gradient, darkMode, }: {
    knockout: boolean;
    darkMode: boolean;
    size: number;
    flat: string;
    gradient: string;
}) => string;
//# sourceMappingURL=utils.d.ts.map